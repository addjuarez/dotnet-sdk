// ------------------------------------------------------------------------
// Copyright 2022 The Dapr Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

namespace Dapr.Actors
{
    using System;
    using System.Net.Http;
    using Grpc.Net.Client;
    using Autogenerated = Dapr.Client.Autogen.Grpc.v1;

    /// <summary>
    /// Builder for building <see cref="DaprGrpcInteractor"/>
    /// </summary>
    public sealed class DaprInteractorBuilder
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DaprInteractorBuilder"/> class.
        /// </summary>
        public DaprInteractorBuilder()
        {
            this.GrpcEndpoint = DaprDefaults.GetDefaultGrpcEndpoint();

            this.GrpcChannelOptions = new GrpcChannelOptions()
            { 
                ThrowOperationCanceledOnCancellation = true,
            };
            this.DaprApiToken = DaprDefaults.GetDefaultDaprApiToken();
        }

        internal string GrpcEndpoint { get; private set; }

        internal GrpcChannelOptions GrpcChannelOptions { get; private set; }
        internal string DaprApiToken { get; private set; }

        /// <summary>
        /// Overrides the gRPC endpoint used by <see cref="DaprGrpcInteractor" /> for communicating with the Dapr runtime.
        /// </summary>
        /// <param name="grpcEndpoint">
        /// The URI endpoint to use for gRPC calls to the Dapr runtime. The default value will be 
        /// <c>http://127.0.0.1:DAPR_GRPC_PORT</c> where <c>DAPR_GRPC_PORT</c> represents the value of the 
        /// <c>DAPR_GRPC_PORT</c> environment variable.
        /// </param>
        /// <returns>The <see cref="DaprInteractorBuilder" /> instance.</returns>
        public DaprInteractorBuilder UseGrpcEndpoint(string grpcEndpoint)
        {
            ArgumentVerifier.ThrowIfNullOrEmpty(grpcEndpoint, nameof(grpcEndpoint));
            this.GrpcEndpoint = grpcEndpoint;
            return this;
        }


        /// <summary>
        /// Uses the provided <paramref name="grpcChannelOptions" /> for creating the <see cref="GrpcChannel" />.
        /// </summary>
        /// <param name="grpcChannelOptions">The <see cref="GrpcChannelOptions" /> to use for creating the <see cref="GrpcChannel" />.</param>
        /// <returns>The <see cref="DaprInteractorBuilder" /> instance.</returns>
        public DaprInteractorBuilder UseGrpcChannelOptions(GrpcChannelOptions grpcChannelOptions)
        {
            this.GrpcChannelOptions = grpcChannelOptions;
            return this;
        }

        /// <summary>
        /// Adds the provided <paramref name="apiToken" /> on every request to the Dapr runtime.
        /// </summary>
        /// <param name="apiToken">The token to be added to the request headers/>.</param>
        /// <returns>The <see cref="DaprInteractorBuilder" /> instance.</returns>
        public DaprInteractorBuilder UseDaprApiToken(string apiToken)
        {
            this.DaprApiToken = apiToken;
            return this;
        }

        /// <summary>
        /// Builds a <see cref="DaprGrpcInteractor" /> instance from the properties of the builder.
        /// </summary>
        /// <returns>The <see cref="DaprGrpcInteractor" />.</returns>
        internal DaprGrpcInteractor Build()
        {
            var grpcEndpoint = new Uri(this.GrpcEndpoint);
            if (grpcEndpoint.Scheme != "http" && grpcEndpoint.Scheme != "https")
            {
                throw new InvalidOperationException("The gRPC endpoint must use http or https.");
            }

            if (grpcEndpoint.Scheme.Equals(Uri.UriSchemeHttp))
            {
                // Set correct switch to maksecure gRPC service calls. This switch must be set before creating the GrpcChannel.
                AppContext.SetSwitch("System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport", true);
            }


            var channel = GrpcChannel.ForAddress(this.GrpcEndpoint, this.GrpcChannelOptions);
            var client = new Autogenerated.Dapr.DaprClient(channel);
            
            return new DaprGrpcInteractor(channel, client, this.DaprApiToken);
        }
    }
}
