// ------------------------------------------------------------------------
// Copyright 2021 The Dapr Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

namespace Dapr.Actors.Runtime
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using System.Text.Json;
    using System.Threading;
    using System.Threading.Tasks;
    using Autogenerated = Dapr.Client.Autogen.Grpc.v1;
    using Google.Protobuf;
    using Google.Protobuf.WellKnownTypes;

    /// <summary>
    /// State Provider to interact with Dapr runtime.
    /// </summary>
    internal class DaprStateProvider
    {
        private readonly IActorStateSerializer actorStateSerializer;
        private readonly JsonSerializerOptions jsonSerializerOptions;

        private readonly IDaprInteractor daprInteractor;

        public DaprStateProvider(IDaprInteractor daprInteractor, IActorStateSerializer actorStateSerializer = null)
        {
            this.actorStateSerializer = actorStateSerializer;
            this.daprInteractor = daprInteractor;
        }

        public DaprStateProvider(IDaprInteractor daprInteractor, JsonSerializerOptions jsonSerializerOptions = null)
        {
            this.jsonSerializerOptions = jsonSerializerOptions;
            this.daprInteractor = daprInteractor;
        }

        public async Task<ConditionalValue<T>> TryLoadStateAsync<T>(string actorType, string actorId, string stateName, CancellationToken cancellationToken = default)
        {
            var result = new ConditionalValue<T>(false, default);
            var stringResult = await this.daprInteractor.GetStateAsync(actorType, actorId, stateName, cancellationToken);

            if (stringResult.Length != 0)
            {
                T typedResult;

                // perform default json de-serialization if custom serializer was not provided.
                if (this.actorStateSerializer != null)
                {
                    var byteResult = Convert.FromBase64String(stringResult.Trim('"'));
                    typedResult = this.actorStateSerializer.Deserialize<T>(byteResult);
                }
                else
                {
                    typedResult = JsonSerializer.Deserialize<T>(stringResult, jsonSerializerOptions);
                }

                result = new ConditionalValue<T>(true, typedResult);
            }

            return result;
        }

        public async Task<bool> ContainsStateAsync(string actorType, string actorId, string stateName, CancellationToken cancellationToken = default)
        {
            var byteResult = await this.daprInteractor.GetStateAsync(actorType, actorId, stateName, cancellationToken);
            return byteResult.Length != 0;
        }

        public async Task SaveStateAsync(string actorType, string actorId, IReadOnlyCollection<ActorStateChange> stateChanges, CancellationToken cancellationToken = default)
        {
            await this.daprInteractor.DoStateChangesTransactionallyAsync(actorType, actorId, stateChanges, this.actorStateSerializer, this.jsonSerializerOptions, cancellationToken);
        }

    }
}
